import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
import subprocess
import os
import winreg
import json
import webbrowser
from PIL import Image, ImageTk
from typing import Optional, List, Dict

class GModLauncher:
    def __init__(self, root):
        self.root = root
        self.dark_mode = False
        self.language = "ru"
        self.favorite_servers = []
        self.custom_servers = []
        self.server_history = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π
        self.steam_path: Optional[str] = None
        self.gmod_path: Optional[str] = None
        self.update_paths()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.load_data()
        
        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        self.setup_localization()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.load_images()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        self.load_servers()
        self.load_mods()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.apply_theme()
        self.update_language()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.gmod_process = None
    
    def setup_localization(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.localization = {
            "ru": {
                "title": "Garry's Mod Launcher",
                "subtitle": "Custom Launcher",
                "tabs": ["–°–µ—Ä–≤–µ—Ä—ã", "–ú–æ–¥—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
                "server_columns": ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò–≥—Ä–æ–∫–∏", "–ö–∞—Ä—Ç–∞", "–ü–∏–Ω–≥", "–ê–¥—Ä–µ—Å"],
                "buttons": {
                    "launch": "–ó–∞–ø—É—Å—Ç–∏—Ç—å GMod",
                    "refresh": "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë",
                    "exit": "–í—ã—Ö–æ–¥",
                    "connect": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                    "mods_folder": "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –º–æ–¥–æ–≤",
                    "update_paths": "–û–±–Ω–æ–≤–∏—Ç—å –ø—É—Ç–∏",
                    "manual_select": "–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä GMod",
                    "theme_light": "‚òÄÔ∏è",
                    "theme_dark": "üåô",
                    "add_server": "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                    "add_favorite": "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    "remove_favorite": "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    "install_mod": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥",
                    "workshop": "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è Steam"
                },
                "settings": {
                    "paths": "–ü—É—Ç–∏",
                    "launch_options": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞",
                    "console": "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –∫–æ–Ω—Å–æ–ª—å—é (-console)",
                    "not_found": "–ù–µ –Ω–∞–π–¥–µ–Ω",
                    "select_gmod": "–í—ã–±–µ—Ä–∏—Ç–µ gmod.exe",
                    "success": "–£—Å–ø–µ—Ö",
                    "path_set": "–ü—É—Ç—å –∫ GMod —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    "error": "–û—à–∏–±–∫–∞",
                    "not_gmod": "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è gmod.exe",
                    "updated": "–û–±–Ω–æ–≤–ª–µ–Ω–æ",
                    "all_updated": "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    "enter_ip": "–í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞:",
                    "enter_port": "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 27015):",
                    "server_added": "–°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!",
                    "mod_install": "–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–∞ –∏–∑ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π Steam:",
                    "mod_installed": "–ú–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                    "no_steam": "Steam –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"
                }
            },
            "en": {
                "title": "Garry's Mod Launcher",
                "subtitle": "Custom Launcher",
                "tabs": ["Servers", "Mods", "Settings"],
                "server_columns": ["Name", "Players", "Map", "Ping", "Address"],
                "buttons": {
                    "launch": "Launch GMod",
                    "refresh": "Refresh All",
                    "exit": "Exit",
                    "connect": "Connect",
                    "mods_folder": "Open Mods Folder",
                    "update_paths": "Update Paths",
                    "manual_select": "Manual GMod Select",
                    "theme_light": "‚òÄÔ∏è",
                    "theme_dark": "üåô",
                    "add_server": "Add Server",
                    "add_favorite": "Add to Favorites",
                    "remove_favorite": "Remove from Favorites",
                    "install_mod": "Install Mod",
                    "workshop": "Steam Workshop"
                },
                "settings": {
                    "paths": "Paths",
                    "launch_options": "Launch Options",
                    "console": "Launch with console (-console)",
                    "not_found": "Not found",
                    "select_gmod": "Select gmod.exe",
                    "success": "Success",
                    "path_set": "GMod path set successfully",
                    "error": "Error",
                    "not_gmod": "Selected file is not gmod.exe",
                    "updated": "Updated",
                    "all_updated": "All data updated successfully",
                    "enter_ip": "Enter server IP:",
                    "enter_port": "Enter server port (default 27015):",
                    "server_added": "Server added!",
                    "mod_install": "Enter Steam Workshop mod ID:",
                    "mod_installed": "Mod installed!",
                    "no_steam": "Steam not found, installation impossible"
                }
            }
        }
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists("launcher_data.json"):
                with open("launcher_data.json", "r", encoding="utf-8") as f:
                    data = json.load(f)
                    self.favorite_servers = data.get("favorites", [])
                    self.custom_servers = data.get("custom_servers", [])
                    self.server_history = data.get("history", [])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = {
                "favorites": self.favorite_servers,
                "custom_servers": self.custom_servers,
                "history": self.server_history
            }
            with open("launcher_data.json", "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def load_images(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–æ—Ç–∏–ø (150x150)
            self.icon_image = ImageTk.PhotoImage(Image.open("gmo.png").resize((150, 150), Image.LANCZOS))
            
            # –ú–∞–ª–µ–Ω—å–∫–∏–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (50x50)
            self.small_icon = ImageTk.PhotoImage(Image.open("gmo.png").resize((50, 50), Image.LANCZOS))
            
            # –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            bg_img = Image.open("gar3main.png")
            self.bg_image = ImageTk.PhotoImage(bg_img.resize((1000, 700), Image.LANCZOS))
            self.bg_image_dark = ImageTk.PhotoImage(bg_img.resize((1000, 700), Image.LANCZOS).point(lambda p: p * 0.4))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            self.icon_image = None
            self.small_icon = None
            self.bg_image = None
            self.bg_image_dark = None
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title(self._("title"))
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        if self.small_icon:
            self.root.iconphoto(False, self.small_icon)
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞
        self.bg_label = ttk.Label(self.main_frame)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        self.header_frame = ttk.Frame(self.content_frame)
        self.header_frame.pack(fill=tk.X, pady=(0, 20))
        
        if self.icon_image:
            ttk.Label(self.header_frame, image=self.icon_image).pack(side=tk.LEFT, padx=10)
        
        title_frame = ttk.Frame(self.header_frame)
        title_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        self.title_label = ttk.Label(title_frame, font=('Helvetica', 18, 'bold'))
        self.title_label.pack(anchor=tk.W)
        self.subtitle_label = ttk.Label(title_frame, font=('Helvetica', 10))
        self.subtitle_label.pack(anchor=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.header_frame)
        control_frame.pack(side=tk.RIGHT)
        
        self.theme_btn = ttk.Button(control_frame, width=3, 
                                   command=self.toggle_theme)
        self.theme_btn.pack(side=tk.LEFT, padx=5)
        
        self.lang_btn = ttk.Button(control_frame, text="RU/EN", 
                                  command=self.toggle_language)
        self.lang_btn.pack(side=tk.LEFT)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.body_frame = ttk.Frame(self.content_frame)
        self.body_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(self.body_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.setup_servers_tab()
        self.setup_mods_tab()
        self.setup_settings_tab()
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É
        self.bottom_frame = ttk.Frame(self.content_frame)
        self.bottom_frame.pack(fill=tk.X, pady=(20, 0))
        
        # –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–µ–ª–µ–Ω–∞—è)
        self.launch_btn = tk.Button(self.bottom_frame, 
                                  bg="#4CAF50", fg="black",
                                  relief=tk.RAISED, bd=2,
                                  command=self.launch_gmod)
        self.launch_btn.pack(side=tk.LEFT, padx=5, ipadx=10, ipady=5)
        
        self.refresh_btn = ttk.Button(self.bottom_frame,
                                    command=self.refresh_all)
        self.refresh_btn.pack(side=tk.LEFT, padx=5)
        
        self.exit_btn = ttk.Button(self.bottom_frame,
                                 command=self.on_close)
        self.exit_btn.pack(side=tk.RIGHT, padx=5)

    def _(self, key):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        return self.localization[self.language].get(key, key)

    def update_language(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞"""
        self.root.title(self._("title"))
        self.title_label.config(text=self._("title"))
        self.subtitle_label.config(text=self._("subtitle"))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        for i, tab_name in enumerate(self._("tabs")):
            self.notebook.tab(i, text=tab_name)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.launch_btn.config(text=self._("buttons")["launch"])
        self.refresh_btn.config(text=self._("buttons")["refresh"])
        self.exit_btn.config(text=self._("buttons")["exit"])
        self.lang_btn.config(text="RU/EN" if self.language == "ru" else "EN/RU")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        if hasattr(self, 'servers_tree'):
            for i, col in enumerate(self._("server_columns")):
                self.servers_tree.heading(f"#{i+1}", text=col)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if hasattr(self, 'connect_btn'):
            self.connect_btn.config(text=self._("buttons")["connect"])
        if hasattr(self, 'mods_folder_btn'):
            self.mods_folder_btn.config(text=self._("buttons")["mods_folder"])
        if hasattr(self, 'add_server_btn'):
            self.add_server_btn.config(text=self._("buttons")["add_server"])
        if hasattr(self, 'favorite_btn'):
            self.favorite_btn.config(text=self._("buttons")["add_favorite"])
        if hasattr(self, 'install_mod_btn'):
            self.install_mod_btn.config(text=self._("buttons")["install_mod"])
        if hasattr(self, 'workshop_btn'):
            self.workshop_btn.config(text=self._("buttons")["workshop"])

    def toggle_language(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
        self.language = "en" if self.language == "ru" else "ru"
        self.update_language()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"""
        if self.dark_mode:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            bg_color = '#2d2d2d'
            fg_color = '#ffffff'
            btn_color = '#3d3d3d'
            self.bg_label.config(image=self.bg_image_dark if self.bg_image_dark else self.bg_image)
            self.theme_btn.config(text=self._("buttons")["theme_dark"])
            
            # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            self.style = ttk.Style()
            self.style.configure('.', background=bg_color, foreground='black')
            self.style.configure('TFrame', background=bg_color)
            self.style.configure('TLabel', background=bg_color, foreground=fg_color)
            self.style.configure('TButton', background=btn_color, foreground='black')
            self.style.configure('Treeview', background=bg_color, fieldbackground=bg_color, 
                               foreground=fg_color, selectbackground='#0078d7')
            self.style.map('Treeview', background=[('selected', '#0078d7')], 
                          foreground=[('selected', 'white')])
            
            # –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –∑–µ–ª–µ–Ω–æ–π –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ)
            self.launch_btn.config(bg="#4CAF50", fg="black")
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            bg_color = '#f0f0f0'
            fg_color = '#000000'
            btn_color = '#e1e1e1'
            self.bg_label.config(image=self.bg_image)
            self.theme_btn.config(text=self._("buttons")["theme_light"])
            
            # –°—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            self.style = ttk.Style()
            self.style.configure('.', background=bg_color, foreground='black')
            self.style.configure('TFrame', background=bg_color)
            self.style.configure('TLabel', background=bg_color, foreground=fg_color)
            self.style.configure('TButton', background=btn_color, foreground='black')
            self.style.configure('Treeview', background=bg_color, fieldbackground=bg_color, 
                               foreground=fg_color, selectbackground='#0078d7')
            self.style.map('Treeview', background=[('selected', '#0078d7')], 
                          foreground=[('selected', 'white')])
            
            # –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            self.launch_btn.config(bg="#4CAF50", fg="black")

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        self.dark_mode = not self.dark_mode
        self.apply_theme()

    def refresh_all(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.update_paths()
        self.load_servers()
        self.load_mods()
        messagebox.showinfo(self._("settings")["updated"], 
                          self._("settings")["all_updated"])

    def update_paths(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ Steam –∏ GMod"""
        self.steam_path = self.find_steam_path()
        self.gmod_path = self.find_gmod_path()
    
    def find_steam_path(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ Steam —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä Windows"""
        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\WOW6432Node\\Valve\\Steam") as key:
                path = winreg.QueryValueEx(key, "InstallPath")[0]
                if os.path.exists(path):
                    return path
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Steam –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {e}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞
        alternate_paths = [
            os.path.join(os.getenv("ProgramFiles(x86)", ""), "Steam"),
            os.path.expanduser("~") + "\\Steam",
            "C:\\Steam",
            "D:\\Steam"
        ]
        
        for path in alternate_paths:
            if os.path.exists(path):
                return path
        
        return None
    
    def find_gmod_path(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ Garry's Mod"""
        if not self.steam_path:
            return None
            
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
        standard_path = os.path.join(self.steam_path, "steamapps", "common", "GarrysMod", "gmod.exe")
        if os.path.exists(standard_path):
            return standard_path
            
        # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Steam
        library_folders_path = os.path.join(self.steam_path, "steamapps", "libraryfolders.vdf")
        if os.path.exists(library_folders_path):
            try:
                with open(library_folders_path, "r", encoding="utf-8") as f:
                    for line in f:
                        if '"path"' in line:
                            path = line.split('"')[-2].replace('\\\\', '\\')
                            test_path = os.path.join(path, "steamapps", "common", "GarrysMod", "gmod.exe")
                            if os.path.exists(test_path):
                                return test_path
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è libraryfolders.vdf: {e}")
        
        return None

    def setup_servers_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
        self.servers_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.servers_tab, text=self._("tabs")[0])
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.servers_tree = ttk.Treeview(self.servers_tab, columns=("name", "players", "map", "ping", "address"), show="headings")
        for i, col in enumerate(self._("server_columns")):
            self.servers_tree.heading(f"#{i+1}", text=col)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.servers_tree.column("name", width=250, anchor=tk.W)
        self.servers_tree.column("players", width=70, anchor=tk.CENTER)
        self.servers_tree.column("map", width=120, anchor=tk.W)
        self.servers_tree.column("ping", width=50, anchor=tk.CENTER)
        self.servers_tree.column("address", width=120, anchor=tk.W)
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(self.servers_tab, orient="vertical", command=self.servers_tree.yview)
        self.servers_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.servers_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        btn_frame = ttk.Frame(self.servers_tab)
        btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.connect_btn = ttk.Button(btn_frame, command=self.connect_to_server)
        self.connect_btn.pack(side=tk.LEFT, padx=5)
        
        self.add_server_btn = ttk.Button(btn_frame, command=self.add_custom_server)
        self.add_server_btn.pack(side=tk.LEFT, padx=5)
        
        self.favorite_btn = ttk.Button(btn_frame, command=self.toggle_favorite)
        self.favorite_btn.pack(side=tk.LEFT, padx=5)
    
    def setup_mods_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –º–æ–¥–∞–º–∏"""
        self.mods_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.mods_tab, text=self._("tabs")[1])
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤
        self.mods_list = tk.Listbox(self.mods_tab, selectmode=tk.MULTIPLE)
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(self.mods_tab, orient="vertical", command=self.mods_list.yview)
        self.mods_list.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.mods_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–º–∏
        btn_frame = ttk.Frame(self.mods_tab)
        btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.mods_folder_btn = ttk.Button(btn_frame, command=self.open_mods_folder)
        self.mods_folder_btn.pack(side=tk.LEFT, padx=5)
        
        self.install_mod_btn = ttk.Button(btn_frame, command=self.install_workshop_mod)
        self.install_mod_btn.pack(side=tk.LEFT, padx=5)
        
        self.workshop_btn = ttk.Button(btn_frame, command=self.open_workshop)
        self.workshop_btn.pack(side=tk.LEFT, padx=5)
    
    def setup_settings_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        self.settings_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_tab, text=self._("tabs")[2])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
        path_frame = ttk.LabelFrame(self.settings_tab, text=self._("settings")["paths"], padding=10)
        path_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(path_frame, text=f"–ü—É—Ç—å –∫ Steam: {self.steam_path or self._('settings')['not_found']}").pack(anchor=tk.W)
        ttk.Label(path_frame, text=f"–ü—É—Ç—å –∫ GMod: {self.gmod_path or self._('settings')['not_found']}").pack(anchor=tk.W)
        
        btn_frame = ttk.Frame(path_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(btn_frame, text=self._("buttons")["update_paths"], 
                  command=self.update_paths).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text=self._("buttons")["manual_select"], 
                  command=self.manual_path_select).pack(side=tk.LEFT, padx=5)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
        launch_frame = ttk.LabelFrame(self.settings_tab, text=self._("settings")["launch_options"], padding=10)
        launch_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(launch_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:").pack(anchor=tk.W)
        self.launch_options = ttk.Entry(launch_frame)
        self.launch_options.pack(fill=tk.X, pady=5)
        self.launch_options.insert(0, "-windowed -w 1920 -h 1080")
        
        self.console_var = tk.IntVar()
        ttk.Checkbutton(launch_frame, text=self._("settings")["console"], 
                       variable=self.console_var).pack(anchor=tk.W)

    def add_custom_server(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        ip = simpledialog.askstring(self._("settings")["enter_ip"], 
                                   self._("settings")["enter_ip"])
        if not ip:
            return
            
        port = simpledialog.askstring(self._("settings")["enter_port"], 
                                     self._("settings")["enter_port"],
                                     initialvalue="27015")
        if not port:
            port = "27015"
            
        address = f"{ip}:{port}"
        server_info = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä {len(self.custom_servers)+1}", 
                      "0/0", "?", "?", address)
        
        self.custom_servers.append(server_info)
        self.save_data()
        self.load_servers()
        messagebox.showinfo(self._("settings")["success"], 
                          self._("settings")["server_added"])

    def toggle_favorite(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        selected = self.servers_tree.focus()
        if not selected:
            messagebox.showwarning(self._("settings")["error"], 
                                 "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä!")
            return
            
        server = self.servers_tree.item(selected)['values']
        address = server[4]  # –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        if any(s[4] == address for s in self.favorite_servers):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            self.favorite_servers = [s for s in self.favorite_servers if s[4] != address]
            self.favorite_btn.config(text=self._("buttons")["add_favorite"])
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.favorite_servers.append(server)
            self.favorite_btn.config(text=self._("buttons")["remove_favorite"])
        
        self.save_data()

    def install_workshop_mod(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–∞ –∏–∑ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π Steam"""
        if not self.steam_path:
            messagebox.showerror(self._("settings")["error"], 
                               self._("settings")["no_steam"])
            return
            
        mod_id = simpledialog.askstring(self._("settings")["mod_install"], 
                                       self._("settings")["mod_install"])
        if not mod_id:
            return
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–∞
            steamcmd = os.path.join(self.steam_path, "steamcmd.exe")
            command = f'"{steamcmd}" +login anonymous +workshop_download_item 4000 {mod_id} +quit'
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
            subprocess.Popen(command, shell=True)
            messagebox.showinfo(self._("settings")["success"], 
                              self._("settings")["mod_installed"])
        except Exception as e:
            messagebox.showerror(self._("settings")["error"], 
                               f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–∞: {e}")

    def open_workshop(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π Steam"""
        webbrowser.open("https://steamcommunity.com/workshop/browse/?appid=4000")

    def manual_path_select(self):
        """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø—É—Ç–∏ –∫ GMod"""
        path = filedialog.askopenfilename(
            title=self._("settings")["select_gmod"],
            filetypes=[("Garry's Mod", "gmod.exe"), ("Executable files", "*.exe")]
        )
        
        if path and os.path.basename(path).lower() == "gmod.exe":
            self.gmod_path = path
            messagebox.showinfo(self._("settings")["success"], 
                              self._("settings")["path_set"])
            self.update_paths()
        elif path:
            messagebox.showerror(self._("settings")["error"], 
                               self._("settings")["not_gmod"])
    
    def open_mods_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å –º–æ–¥–∞–º–∏"""
        if not self.steam_path:
            messagebox.showerror(self._("settings")["error"], 
                               "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ Steam!")
            return
            
        mods_path = os.path.join(self.steam_path, "steamapps", "common", "GarrysMod", "garrysmod", "addons")
        if os.path.exists(mods_path):
            os.startfile(mods_path)
        else:
            messagebox.showerror(self._("settings")["error"], 
                               "–ü–∞–ø–∫–∞ —Å –º–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    def load_servers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for i in self.servers_tree.get_children():
            self.servers_tree.delete(i)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        servers = [
            ("DarkRP #1 | –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "24/32", "rp_downtown_v4c_v2", "45", "gmod.example.com:27015"),
            ("TTT Pro | –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º", "12/16", "ttt_minecraft", "62", "ttt.example.com:27015"),
            ("Murder Mystery | –ó–∞–≥–∞–¥–æ—á–Ω—ã–µ —É–±–∏–π—Å—Ç–≤–∞", "8/10", "mu_mansion", "38", "murder.example.com:27015"),
            ("Sandbox | –°–≤–æ–±–æ–¥–Ω–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "15/20", "gm_flatgrass", "55", "sandbox.example.com:27015"),
            ("Zombie Survival | –í—ã–∂–∏–≤–∞–Ω–∏–µ", "18/24", "zs_lighthouse", "42", "zombie.example.com:27015")
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        for server in self.favorite_servers:
            self.servers_tree.insert("", tk.END, values=server, tags=('favorite',))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        for server in servers:
            self.servers_tree.insert("", tk.END, values=server)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã
        for server in self.custom_servers:
            self.servers_tree.insert("", tk.END, values=server, tags=('custom',))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.servers_tree.tag_configure('favorite', background='#fffacd')  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        self.servers_tree.tag_configure('custom', background='#e6f7ff')    # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö

    def load_mods(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–æ–≤"""
        self.mods_list.delete(0, tk.END)
        
        if not self.steam_path:
            self.mods_list.insert(tk.END, "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ Steam!")
            return
            
        mods_path = os.path.join(self.steam_path, "steamapps", "common", "GarrysMod", "garrysmod", "addons")
        
        if os.path.exists(mods_path):
            try:
                mods = [d for d in os.listdir(mods_path) 
                       if os.path.isdir(os.path.join(mods_path, d)) and not d.startswith(".")]
                
                if not mods:
                    self.mods_list.insert(tk.END, "–ú–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    return
                
                for mod in sorted(mods):
                    self.mods_list.insert(tk.END, mod)
            except Exception as e:
                self.mods_list.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–æ–≤: {e}")
        else:
            self.mods_list.insert(tk.END, "–ü–∞–ø–∫–∞ —Å –º–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    def launch_gmod(self):
        """–ó–∞–ø—É—Å–∫ Garry's Mod"""
        if not self.gmod_path:
            messagebox.showerror(self._("settings")["error"], 
                               "Garry's Mod –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
            args = [self.gmod_path]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            options = self.launch_options.get().strip()
            if options:
                args.extend(options.split())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.console_var.get():
                args.append("-console")
            
            # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ª–∞—É–Ω—á–µ—Ä–∞
            self.root.withdraw()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            self.gmod_process = subprocess.Popen(args)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            self.root.after(1000, self.check_gmod_process)
                
        except Exception as e:
            self.root.deiconify()
            messagebox.showerror(self._("settings")["error"], 
                               f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É:\n{e}")

    def check_gmod_process(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ GMod"""
        if self.gmod_process.poll() is None:
            # –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            self.root.after(1000, self.check_gmod_process)
        else:
            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∞—É–Ω—á–µ—Ä —Å–Ω–æ–≤–∞
            self.root.deiconify()
            self.gmod_process = None

    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
        selected = self.servers_tree.focus()
        if not selected:
            messagebox.showwarning(self._("settings")["error"], 
                                 "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        
        server_info = self.servers_tree.item(selected)['values']
        address = server_info[4]  # –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é
        if server_info not in self.server_history:
            self.server_history.append(server_info)
            self.save_data()
        
        if not self.gmod_path:
            messagebox.showerror(self._("settings")["error"], 
                               "Garry's Mod –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            args = [self.gmod_path, "-connect", address]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            options = self.launch_options.get().strip()
            if options:
                args.extend(options.split())
            
            # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ª–∞—É–Ω—á–µ—Ä–∞
            self.root.withdraw()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
            self.gmod_process = subprocess.Popen(args)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            self.root.after(1000, self.check_gmod_process)
                
        except Exception as e:
            self.root.deiconify()
            messagebox.showerror(self._("settings")["error"], 
                               f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{e}")

    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.save_data()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = GModLauncher(root)
    root.mainloop()